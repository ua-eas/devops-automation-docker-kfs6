#!/bin/bash

check_process () {
    PROCPIDS=`pgrep -u kualiadm -f "$1"`
    if [ "X$PROCPIDS" = "X" ]
    then
        return 1;
    else
        return 0;
    fi
}

tomcat_start () {
    if check_process
    then
        echo "Tomcat application server tomcat is already running." >> $LOGS_DIRECTORY/kfs-startup.log
    else
    
        # re-map the tomcat logs directory to our mapped container volume
        rm -f $TOMCAT_BASE_DIR/logs
        ln -s $LOGS_DIRECTORY $TOMCAT_BASE_DIR/logs
    
        # make logs directory and kfs-startup.log if they do not exists
        if [ ! -f $LOGS_DIRECTORY/kfs-startup.log ] 
        then
            mkdir -p $LOGS_DIRECTORY
            echo "Creating logs directory." >> $LOGS_DIRECTORY/kfs-startup.log
            touch $LOGS_DIRECTORY/kfs-startup.log
            chown -R kualiadm:kuali $LOGS_DIRECTORY
        fi

        chmod -R 777  $LOGS_DIRECTORY
        
        # Make our kfs webapp directory if it doesn't exist
        if [ ! -d $TOMCAT_KFS_DIR ] 
        then
            mkdir $TOMCAT_KFS_DIR
        fi
        
        # Download the WAR file if it doesn't exist
        WAR_FILE="$TOMCAT_KFS_DIR/kfs.war"
        echo "Looking for $WAR_FILE..."
        if [ ! -f $WAR_FILE ] 
        then
            MAVEN_SERVER="https://ka-tools.mosaic.arizona.edu/nexus"
            MAVEN_ENDPOINT="$MAVEN_SERVER/service/local/artifact/maven/redirect"
            WAR_SOURCE_URL="$MAVEN_ENDPOINT?r=snapshots&g=org.kuali.kfs&a=kfs-web&v=ua-release1-SNAPSHOT&c=ua-ksd&p=war"
            curl -L "$WAR_SOURCE_URL" -o $WAR_FILE           
            chown kualiadm:kuali $WAR_FILE
            # Extract the WAR file
            cd $TOMCAT_KFS_DIR
            jar -xf $WAR_FILE
        fi

        echo "Starting Tomcat application server tomcat ..." >> $LOGS_DIRECTORY/kfs-startup.log

        # copy in tomcat configuration files
        cp $TOMCAT_CONFIG_DIRECTORY/server.xml $TOMCAT_BASE_DIR/conf/
        cp $SECURITY_DIRECTORY/tomcat-users.xml $TOMCAT_BASE_DIR/conf/
        cp $TOMCAT_CONFIG_DIRECTORY/logging.properties $TOMCAT_BASE_DIR/conf
        cp $TOMCAT_CONFIG_DIRECTORY/log4j.properties $TOMCAT_KFS_WEBINF_DIR/classes

        # copy in New Relic config file
        cp $SECURITY_DIRECTORY/newrelic.yml /usr/share/tomcat7/lib/
        
        # copy in oracle JDBC drivers
        cp $TOMCAT_CONFIG_DIRECTORY/classes/* /usr/share/tomcat7/lib/

        cp $TOMCAT_CONFIG_DIRECTORY/setenv.sh /usr/share/tomcat7/bin/
        chown kualiadm:kuali $TOMCAT_BASE_DIR/bin/setenv.sh
        chmod +x $TOMCAT_BASE_DIR/bin/setenv.sh

        /usr/share/tomcat7/bin/catalina.sh start
        
        # Tail the tomcat log file to keep the container alive
        tail -f /logs/catalina.out

    fi

    return;
}

tomcat_stop() {
    if check_process
    then
        echo "Stopping Tomcat application server tomcat ..."

        /usr/share/tomcat7/bin/catalina.sh stop

        sleep 3
        if check_process
        then
            PIDS=`pgrep -f -d' ' `
            echo "Unable to stop Tomcat application server tomcat: running PIDS are '$PIDS'." >> $LOGS_DIRECTORY/kfs-startup.log
        else
            echo "Tomcat application server tomcat stopped." >> $LOGS_DIRECTORY/kfs-startup.log
        fi
    else
        echo "Tomcat application server tomcat is already stopped." >> $LOGS_DIRECTORY/kfs-startup.log
    fi

    return;
}

tomcat_status () {
    if check_process
    then
        PIDS=`pgrep -f -d' ' `
        echo "Tomcat application server tomcat is running: PIDS are '$PIDS'." >> $LOGS_DIRECTORY/kfs-startup.log
    else
        echo "Tomcat application server tomcat is stopped." >> $LOGS_DIRECTORY/kfs-startup.log
    fi

    return;
}

case "$1" in
    'start')
           tomcat_start
           ;;
    'stop')
           tomcat_stop
           ;;
    'restart')
           tomcat_stop
           tomcat_start
           ;;
    'status')
           tomcat_status
           ;;
    *)
        echo "Invalid input parameter: $1." >> $LOGS_DIRECTORY/kfs-startup.log
        exit 1
           ;;
esac